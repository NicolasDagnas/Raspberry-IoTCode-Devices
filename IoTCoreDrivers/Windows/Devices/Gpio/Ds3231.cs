//*************************************************************************************************
// DEBUT DU FICHIER
//*************************************************************************************************

//*************************************************************************************************
// Nom           : Ds3231.cs
// Auteur        : Nicolas Dagnas
// Description   : Déclaration de l'objet Ds3231
// Environnement : Visual Studio 2015
// Créé le       : 09/12/2016
// Modifié le    : 27/08/2017
//*************************************************************************************************

//-------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------
using System;
using System.IO;
using System.Net;
using System.Threading.Tasks;
using System.Text.RegularExpressions;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Windows.Devices.I2c;
using Windows.Devices.Enumeration;
using Windows.Networking.Connectivity;
//-------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------

//*************************************************************************************************
// Début du bloc "Windows.Devices.Gpio"
//*************************************************************************************************
namespace Windows.Devices.Gpio
	{

	//  ####    ####   ###    ###    ###     #
	//  #   #  #      #   #  #   #  #   #   ##
	//  #   #   ###      #      #      #   # #
	//  #   #      #  #   #    #    #   #    #
	//  ####   ####    ###   #####   ###     #

	//*********************************************************************************************
	// Classe Ds3231
	//*********************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------
	/// <summary>
	/// Permet la communication avec la puce de gestion de l'heure.
	/// </summary>
	//---------------------------------------------------------------------------------------------
	public static class Ds3231
		{
		//-----------------------------------------------------------------------------------------
		// Section des Attributs
		//-----------------------------------------------------------------------------------------
		private static bool      DevicePresenceException = false;
		private static bool      Initializing            = false;
		private static I2cDevice I2cCardDevice           = null;
		private static int       TimeOffset              = 0;
		private static DateTime  LastCheck               = DateTime.MinValue;
		//-----------------------------------------------------------------------------------------

		//*****************************************************************************************
		#region // Section des Procédures Privées
		//-----------------------------------------------------------------------------------------
		
		//*****************************************************************************************
		/// <summary>
		/// Convertie une valeur BCD en Integer.
		/// </summary>
		/// <param name="Value">Valeur BCD.</param>
		/// <returns>Integer.</returns>
		//-----------------------------------------------------------------------------------------
		private static int BcdToInt ( byte Value )
			{
			//-------------------------------------------------------------------------------------
			return ( Value & 0xF ) + ( ( Value >> 4 ) * 10 );
			//-------------------------------------------------------------------------------------
			}
		//*****************************************************************************************

		//*****************************************************************************************
		/// <summary>
		/// Convertie une valeur entière en valeur BCD.
		/// </summary>
		/// <param name="Value">Valeur Entière.</param>
		/// <returns>Valeur BCD.</returns>
		//-----------------------------------------------------------------------------------------
		private static byte IntToBcd ( int Value )
			{
			//-------------------------------------------------------------------------------------
			return (byte)( ( Value % 10 ) | ( Value / 10 ) << 0x4 );
			//-------------------------------------------------------------------------------------
			}
		//*****************************************************************************************

		//*****************************************************************************************
		/// <summary>
		/// Lit la date et l'heure dans la puce.
		/// </summary>
		/// <returns>Objet <b>DateTime</b>.</returns>
		//-----------------------------------------------------------------------------------------
		private static DateTime ReadTime ()
			{
			//-------------------------------------------------------------------------------------
			if ( I2cCardDevice == null ) return DateTime.MinValue;
			//-------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------
				byte[] ReadBuffer = new byte[0x13];

				I2cCardDevice.WriteRead ( new byte[] { 0x00 }, ReadBuffer );

				int Seconds = BcdToInt ( ReadBuffer[0] );
				int Minutes = BcdToInt ( ReadBuffer[1] );

				bool Is24HourCock = ( ReadBuffer[2] >> 0x6 ) != 1;

				int Hours;

				if ( Is24HourCock )
					Hours = ( ReadBuffer[2] & 0xF ) + ( ( ReadBuffer[2] >> 4 ) & 0x1 ) * 10 + 
						                                         ( ( ReadBuffer[2] >> 0x5 ) * 20 );
				else
					Hours = ( ReadBuffer[2] & 0xF ) + ( ( ReadBuffer[2] >> 4 ) & 0x1 ) * 10 + 
						                                         ( ( ReadBuffer[2] >> 0x5 ) * 12 );

				int Day    = BcdToInt (         ReadBuffer[3]                );
				int Date   = BcdToInt (         ReadBuffer[4]                );
				int Months = BcdToInt ( (byte)( ReadBuffer[5] & (byte)0x3f ) );
				int Year   = BcdToInt (         ReadBuffer[6]                );

				return new DateTime ( 2000 + Year, Months, Date, Hours, Minutes, Seconds );
				//---------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------
			catch { return DateTime.MinValue; }
			//-------------------------------------------------------------------------------------
			}
		//*****************************************************************************************

		//*****************************************************************************************
		/// <summary>
		/// Ecrit la date et l'heure dans la puce.
		/// </summary>
		/// <param name="Value">Objet <b>DateTime</b> contenant la valeur à écrire.</param>
		//-----------------------------------------------------------------------------------------
		private static void WriteTime ( DateTime Value )
			{
			//-------------------------------------------------------------------------------------
			if ( I2cCardDevice != null )
				{
				//---------------------------------------------------------------------------------
				byte[] Buffer = new byte[8];

				int offset = 0;

				Buffer[offset++] = 0;
				Buffer[offset++] = IntToBcd ( Value.Second     );
				Buffer[offset++] = IntToBcd ( Value.Minute     );
				Buffer[offset++] = IntToBcd ( Value.Hour       );
				Buffer[offset++] = (byte)Value.DayOfWeek;
				Buffer[offset++] = IntToBcd ( Value.Day        );
				Buffer[offset++] = IntToBcd ( Value.Month      );
				Buffer[offset++] = IntToBcd ( Value.Year % 100 );

				try
					{
					I2cCardDevice.Write ( Buffer );
					}
				catch { I2cCardDevice = null; DevicePresenceException = true; }
				//---------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------
			}
		//*****************************************************************************************

		//*****************************************************************************************
		/// <summary>
		/// Synchronise l'heure avec Internet.
		/// </summary>
		//-----------------------------------------------------------------------------------------
		private static async void SyncDateTime ()
			{
			//-------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------
				HttpWebRequest Request = (HttpWebRequest)WebRequest.Create 
					                         ( "http://nist.time.gov/actualtime.cgi?lzbc=siqm9b" );

				HttpWebResponse Response = (HttpWebResponse)(await Request.GetResponseAsync());
				//---------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------
				if ( Response.StatusCode == HttpStatusCode.OK )
					{
					//-----------------------------------------------------------------------------
					StreamReader Stream = new StreamReader ( Response.GetResponseStream () );

					string Result = Stream.ReadToEnd ();

					Result = Regex.Match ( Result, @"(?<=\btime="")[^""]*" ).Value;

					double Milliseconds = Convert.ToInt64 ( Result ) / 1000.0;

					DateTime NetworkTime = new DateTime ( 1970, 1, 1 ).AddMilliseconds 
						                                                          ( Milliseconds );
					WriteTime ( NetworkTime );

					TimeOffset = (int)NetworkTime.Subtract ( DateTime.UtcNow ).TotalSeconds;
					//-----------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------
				}
			catch {}
			//-------------------------------------------------------------------------------------
			}
		//*****************************************************************************************

		//-----------------------------------------------------------------------------------------
		#endregion
		//*****************************************************************************************

		//*****************************************************************************************
		/// <summary>
		/// Initialise le bus de communication avec la carte de gestion de l'heure.
		/// </summary>
		//-----------------------------------------------------------------------------------------
		public static async Task<bool> Initialize ()
			{
			//-------------------------------------------------------------------------------------
			if ( ! Initializing && I2cCardDevice == null && ! DevicePresenceException )
				{
		        //---------------------------------------------------------------------------------
				Initializing = true;
		        //---------------------------------------------------------------------------------

		        //---------------------------------------------------------------------------------
				try
					{
			        //-----------------------------------------------------------------------------
					var QuerySyntaxString = I2cDevice.GetDeviceSelector ( "I2C1" );

					var DeviceIds = await DeviceInformation.FindAllAsync ( QuerySyntaxString );

					I2cConnectionSettings ConnSettings = new I2cConnectionSettings ( 0x68 );

					ConnSettings.BusSpeed    = I2cBusSpeed.FastMode;
					ConnSettings.SharingMode = I2cSharingMode.Shared;

					I2cCardDevice = await I2cDevice.FromIdAsync ( DeviceIds[0].Id, ConnSettings );

					ReadTime ();
			        //-----------------------------------------------------------------------------
					}
		        //---------------------------------------------------------------------------------
				catch ( FileNotFoundException )
					{ I2cCardDevice = null; DevicePresenceException = true; }
		        //---------------------------------------------------------------------------------
				catch {}
		        //---------------------------------------------------------------------------------
				finally { Initializing = false; }
		        //---------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------
			return true;
			//-------------------------------------------------------------------------------------
			}
		//*****************************************************************************************
		
		//*****************************************************************************************
		/// <summary>
		/// Initialise le bus de communication avec la carte de gestion de l'heure.
		/// </summary>
		//-----------------------------------------------------------------------------------------
		public static async void InitializeAsync ()
			{
			//-------------------------------------------------------------------------------------
			if ( ! Initializing && I2cCardDevice == null && ! DevicePresenceException )
				{
		        //---------------------------------------------------------------------------------
				Initializing = true;
		        //---------------------------------------------------------------------------------

		        //---------------------------------------------------------------------------------
				try
					{
			        //-----------------------------------------------------------------------------
					var QuerySyntaxString = I2cDevice.GetDeviceSelector ( "I2C1" );

					var DeviceIds = await DeviceInformation.FindAllAsync ( QuerySyntaxString );

					I2cConnectionSettings ConnSettings = new I2cConnectionSettings ( 0x68 );

					ConnSettings.BusSpeed    = I2cBusSpeed.FastMode;
					ConnSettings.SharingMode = I2cSharingMode.Shared;

					I2cCardDevice = await I2cDevice.FromIdAsync ( DeviceIds[0].Id, ConnSettings );

					ReadTime ();
			        //-----------------------------------------------------------------------------
					}
		        //---------------------------------------------------------------------------------
				catch ( FileNotFoundException )
					{ I2cCardDevice = null; DevicePresenceException = true; }
		        //---------------------------------------------------------------------------------
				catch {}
		        //---------------------------------------------------------------------------------
				finally { Initializing = false; }
		        //---------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------
			}
		//*****************************************************************************************
		
		//*****************************************************************************************
		/// <summary>
		/// Indique si la puce de gestion de l'heure est présente.
		/// </summary>
		//-----------------------------------------------------------------------------------------
		public static bool DevicePresent { get { return ( I2cCardDevice != null ); } }
		//*****************************************************************************************

		//*****************************************************************************************
		/// <summary>
		/// Obtiens la date et l'heure courante.
		/// </summary>
		//-----------------------------------------------------------------------------------------
		public static DateTime Now
			{
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			get
				{
				//---------------------------------------------------------------------------------
				DateTime UtcNow = DateTime.UtcNow;
				//---------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------
				try
					{
					if ( I2cCardDevice == null ) InitializeAsync ();

					if ( I2cCardDevice != null )
						{
						if ( Math.Abs ( UtcNow.Subtract ( LastCheck ).TotalHours ) > 1 )
							{
							if ( Network.InternetNetworkAvailable ) SyncDateTime ();

							DateTime DeviceTime = ReadTime ();

							if ( DeviceTime != DateTime.MinValue )
								TimeOffset = (int)DeviceTime.Subtract ( UtcNow ).TotalSeconds;

							LastCheck = UtcNow;
							}
						}
					}
				//---------------------------------------------------------------------------------
				catch {}
				//---------------------------------------------------------------------------------
				
				//---------------------------------------------------------------------------------
				return ( UtcNow.AddSeconds ( TimeOffset ).ToLocalTime () );
				//---------------------------------------------------------------------------------
				}
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			}
		//*****************************************************************************************

		//*****************************************************************************************
		/// <summary>
		/// Obtiens la température autour de la puce.
		/// </summary>
		//-----------------------------------------------------------------------------------------
		public static double Temperature
			{
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			get
				{
				//---------------------------------------------------------------------------------
				try
					{
					if ( I2cCardDevice == null ) InitializeAsync ();

					if ( I2cCardDevice != null )
						{
						byte[] Buffer = new byte[2];

						I2cCardDevice.WriteRead ( new byte[] { 0x11 }, Buffer );

						return (double)Buffer[0] + ( (double)( Buffer[1] >> 6 ) / 4f );
						}
					}
				//---------------------------------------------------------------------------------
				catch {}
				//---------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------
				return -1;
				//---------------------------------------------------------------------------------
				}
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			}
		//*****************************************************************************************
		}
	//---------------------------------------------------------------------------------------------
	#endregion
	//*********************************************************************************************

	} // Fin du namespace "Windows.Devices.Gpio"
//*************************************************************************************************

//*************************************************************************************************
// FIN DU FICHIER
//*************************************************************************************************

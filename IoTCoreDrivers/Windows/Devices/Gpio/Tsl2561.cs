//*************************************************************************************************
// DEBUT DU FICHIER
//*************************************************************************************************

//*************************************************************************************************
// Nom           : Tsl2561.cs
// Auteur        : Nicolas Dagnas
// Description   : Déclaration de l'objet Tsl2561
// Environnement : Visual Studio 2015
// Créé le       : 10/08/2017
// Modifié le    : 27/08/2017
//*************************************************************************************************

//-------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------
using System;
using System.IO;
using System.Threading.Tasks;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Windows.Devices.I2c;
using Windows.Devices.Enumeration;
//-------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------

//*************************************************************************************************
// Début du bloc "Windows.Devices.Gpio"
//*************************************************************************************************
namespace Windows.Devices.Gpio
	{

	//  #####   ####  #       ###    ####   ####    #
	//    #    #      #      #   #  #      #       ##
	//    #     ###   #         #   ####    ###   # #
	//    #        #  #        #        #  #   #    #
	//    #    ####   #####  #####  ####    ###     #

	//*********************************************************************************************
	// Classe Tsl2561
	//*********************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------
	/// <summary>
	/// Permet la communication avec la puce de relevé de la luminosité.
	/// </summary>
	//---------------------------------------------------------------------------------------------
	public static class Tsl2561
		{
		//-----------------------------------------------------------------------------------------
		// Section des Constantes
		//-----------------------------------------------------------------------------------------
		private const int  TSL2561_ADDR             = 0x0039;
		private const int  TSL2561_INTEGRATION_MODE = 0x0002;
		private const int  TSL2561_INTEGRATION_TIME = 0x0192;
		private const bool TSL2561_GAIN             = false;
		private const int  TSL2561_REG_TIMING       = 0x0001;
		private const int  TSL2561_REG_CONTROL      = 0x0000;
		private const int  TSL2561_REG_ID           = 0x000A;
		private const int  TSL2561_REG_DATA_0       = 0x000C;
		private const int  TSL2561_REG_DATA_1       = 0x000E;
		private const int  TSL2561_CMD              = 0x0080;
		//-----------------------------------------------------------------------------------------

		//-----------------------------------------------------------------------------------------
		// Section des Attributs
		//-----------------------------------------------------------------------------------------
		private static bool      DevicePresenceException = false;
		private static bool      Initializing            = false;
		private static I2cDevice I2cCardDevice           = null;
		private static DateTime  LastCheck               = DateTime.MinValue;
		private static double    CurrentLux              = 0;
		//-----------------------------------------------------------------------------------------

		//*****************************************************************************************
		#region // Section des Procédures Privées
		//-----------------------------------------------------------------------------------------
		
		//*****************************************************************************************
		// Write byte
		//-----------------------------------------------------------------------------------------
		private static void write8 ( byte addr, byte cmd )
			{
			byte[] Command = new byte[] { (byte)((addr) | TSL2561_CMD), cmd };

			I2cCardDevice.Write ( Command );
			}
		//*****************************************************************************************

		//*****************************************************************************************
		// Read byte
		//-----------------------------------------------------------------------------------------
		private static byte I2CRead8 ( byte addr )
			{
			byte[] aaddr = new byte[] { (byte)((addr) | TSL2561_CMD) };
			byte[] data = new byte[1];

			I2cCardDevice.WriteRead ( aaddr, data );

			return data[0];
			}
		//*****************************************************************************************

		//*****************************************************************************************
		// Read integer
		//-----------------------------------------------------------------------------------------
		private static ushort I2CRead16 ( byte addr )
			{
			byte[] aaddr = new byte[] { (byte)((addr) | TSL2561_CMD) };
			byte[] data = new byte[2];

			I2cCardDevice.WriteRead ( aaddr, data );

			return (ushort)((data[1] << 8) | (data[0]));
			}
		//*****************************************************************************************

		//*****************************************************************************************
		// Set TSL2561 Timing and return the MS
		//-----------------------------------------------------------------------------------------
		private static void SetTiming ()
			{
			int ms = 0;

			switch ( TSL2561_INTEGRATION_MODE )
				{
				case 0 : ms =  14; break;
				case 1 : ms = 101; break;
				case 2 : ms = 402; break;
				default: ms =   0; break;
				}

			int Timing = I2CRead8 ( TSL2561_REG_TIMING );

			if ( TSL2561_GAIN ) Timing |=   0x10;
			else                Timing &= (~0x10);

			// Set integration time (0 to 3) 

			Timing &= ~0x03;
			Timing |= (TSL2561_INTEGRATION_MODE & 0x03 );

			write8 ( TSL2561_REG_TIMING, (byte)Timing );
			}
		//*****************************************************************************************

		//*****************************************************************************************
		// TSL2561 Sensor Power up
		//-----------------------------------------------------------------------------------------
		private static void PowerUp () { write8 ( TSL2561_REG_CONTROL, 0x03 ); }
		//*****************************************************************************************

		//*****************************************************************************************
		// TSL2561 Sensor Power down
		//-----------------------------------------------------------------------------------------
		private static void PowerDown () { write8 ( TSL2561_REG_CONTROL, 0x00 ); }
		//*****************************************************************************************

		//*****************************************************************************************
		// Calculate Lux
		//-----------------------------------------------------------------------------------------
		public static double GetLux ( uint CH0, uint CH1 )
			{
			double ratio, d0, d1;
			double lux = 0.0;

			// Determine if either sensor saturated (0xFFFF)
			// If so, abandon ship (calculation will not be accurate)

			if ( ( CH0 == 0xFFFF ) || ( CH1 == 0xFFFF ) ) { lux = 0.0; return lux; }

			// Convert from unsigned integer to floating point

			d0 = CH0; d1 = CH1;

			// We will need the ratio for subsequent calculations

			ratio = d1 / d0;

			// Normalize for integration time

			d0 *= ( 402.0 / TSL2561_INTEGRATION_TIME );
			d1 *= ( 402.0 / TSL2561_INTEGRATION_TIME );

			// Normalize for gain

			if ( ! TSL2561_GAIN ) { d0 *= 16; d1 *= 16; }

			// Determine lux per datasheet equations:

			if      ( ratio < 0.50 ) lux = 0.0304  * d0 - 0.062   * d0 * Math.Pow ( ratio, 1.4 );
			else if ( ratio < 0.61 ) lux = 0.0224  * d0 - 0.031   * d1;
			else if ( ratio < 0.80 ) lux = 0.0128  * d0 - 0.0153  * d1;
			else if ( ratio < 1.30 ) lux = 0.00146 * d0 - 0.00112 * d1;
			else                     lux = 0.0;

			return lux;
			}
		//*****************************************************************************************

		//-----------------------------------------------------------------------------------------
		#endregion
		//*****************************************************************************************

		//*****************************************************************************************
		/// <summary>
		/// Initialise le bus de communication avec la carte de gestion de l'heure.
		/// </summary>
		//-----------------------------------------------------------------------------------------
		public static async Task<bool> Initialize ()
			{
			//-------------------------------------------------------------------------------------
			if ( ! Initializing && I2cCardDevice == null && ! DevicePresenceException )
				{
		        //---------------------------------------------------------------------------------
				Initializing = true;
		        //---------------------------------------------------------------------------------

		        //---------------------------------------------------------------------------------
				try
					{
			        //-----------------------------------------------------------------------------
					var QuerySyntaxString = I2cDevice.GetDeviceSelector ( "I2C1" );

					var DeviceIds = await DeviceInformation.FindAllAsync ( QuerySyntaxString );

					I2cConnectionSettings ConnSettings = new I2cConnectionSettings ( TSL2561_ADDR );

					ConnSettings.BusSpeed    = I2cBusSpeed.FastMode;
					ConnSettings.SharingMode = I2cSharingMode.Shared;

					I2cCardDevice = await I2cDevice.FromIdAsync ( DeviceIds[0].Id, ConnSettings );

					SetTiming ();
					PowerUp   ();
			        //-----------------------------------------------------------------------------
					}
		        //---------------------------------------------------------------------------------
				catch ( FileNotFoundException )
					{ I2cCardDevice = null; DevicePresenceException = true; }
		        //---------------------------------------------------------------------------------
				catch {}
		        //---------------------------------------------------------------------------------
				finally { Initializing = false; }
		        //---------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------
			return true;
			//-------------------------------------------------------------------------------------
			}
		//*****************************************************************************************
		
		//*****************************************************************************************
		/// <summary>
		/// Initialise le bus de communication avec la carte de gestion de l'heure.
		/// </summary>
		//-----------------------------------------------------------------------------------------
		public static async void InitializeAsync ()
			{
			//-------------------------------------------------------------------------------------
			if ( ! Initializing && I2cCardDevice == null && ! DevicePresenceException )
				{
		        //---------------------------------------------------------------------------------
				Initializing = true;
		        //---------------------------------------------------------------------------------

		        //---------------------------------------------------------------------------------
				try
					{
			        //-----------------------------------------------------------------------------
					var QuerySyntaxString = I2cDevice.GetDeviceSelector ( "I2C1" );

					var DeviceIds = await DeviceInformation.FindAllAsync ( QuerySyntaxString );

					I2cConnectionSettings ConnSettings = new I2cConnectionSettings ( TSL2561_ADDR );

					ConnSettings.BusSpeed    = I2cBusSpeed.FastMode;
					ConnSettings.SharingMode = I2cSharingMode.Shared;

					I2cCardDevice = await I2cDevice.FromIdAsync ( DeviceIds[0].Id, ConnSettings );

					SetTiming ();
					PowerUp   ();
			        //-----------------------------------------------------------------------------
					}
		        //---------------------------------------------------------------------------------
				catch ( FileNotFoundException )
					{ I2cCardDevice = null; DevicePresenceException = true; }
		        //---------------------------------------------------------------------------------
				catch {}
		        //---------------------------------------------------------------------------------
				finally { Initializing = false; }
		        //---------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------
			}
		//*****************************************************************************************
		
		//*****************************************************************************************
		/// <summary>
		/// Indique si la puce de gestion de l'heure est présente.
		/// </summary>
		//-----------------------------------------------------------------------------------------
		public static bool DevicePresent { get { return ( I2cCardDevice != null ); } }
		//*****************************************************************************************

		//*****************************************************************************************
		/// <summary>
		/// Obtiens la luminosité ambiante.
		/// </summary>
		//-----------------------------------------------------------------------------------------
		public static double Lux
			{
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			get
				{
				//---------------------------------------------------------------------------------
				DateTime UtcNow = DateTime.UtcNow;
				//---------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------
				try
					{
					if ( I2cCardDevice == null ) InitializeAsync ();

					if ( I2cCardDevice != null )
						{
						if ( Math.Abs ( UtcNow.Subtract ( LastCheck ).TotalSeconds ) > 10 )
							{
							uint[] Data = new uint[2];

							Data[0] = I2CRead16 ( TSL2561_REG_DATA_0 );
							Data[1] = I2CRead16 ( TSL2561_REG_DATA_1 );

							CurrentLux = GetLux ( Data[0], Data[1] );

							LastCheck = UtcNow;
							}
						}
					}
				//---------------------------------------------------------------------------------
				catch {}
				//---------------------------------------------------------------------------------
				
				//---------------------------------------------------------------------------------
				return CurrentLux;
				//---------------------------------------------------------------------------------
				}
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			}
		//*****************************************************************************************
		
		//*****************************************************************************************
		/// <summary>
		/// Obtiens l'identifiant de la Puce.
		/// </summary>
		//-----------------------------------------------------------------------------------------
		public static byte Id
			{
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			get
				{
				//---------------------------------------------------------------------------------
				try
					{
					if ( I2cCardDevice == null ) InitializeAsync ();

					if ( I2cCardDevice != null ) return I2CRead8 ( TSL2561_REG_ID );
					}
				//---------------------------------------------------------------------------------
				catch {}
				//---------------------------------------------------------------------------------
				
				//---------------------------------------------------------------------------------
				return 0;
				//---------------------------------------------------------------------------------
				}
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			}
		//*****************************************************************************************
		}
	//---------------------------------------------------------------------------------------------
	#endregion
	//*********************************************************************************************

	} // Fin du namespace "Windows.Devices.Gpio"
//*************************************************************************************************

//*************************************************************************************************
// FIN DU FICHIER
//*************************************************************************************************

//*************************************************************************************************
// DEBUT DU FICHIER
//*************************************************************************************************

//*************************************************************************************************
// Nom           : Buzzer.cs
// Auteur        : Nicolas Dagnas
// Description   : Déclaration de l'objet Buzzer
// Environnement : Visual Studio 2015
// Créé le       : 19/08/2017
// Modifié le    : 27/08/2017
//*************************************************************************************************

//-------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------
using System;
using System.Threading.Tasks;
using System.Runtime.InteropServices;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Windows.System.Threading;
//-------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------

//*************************************************************************************************
// Début du bloc "Windows.Devices.Gpio"
//*************************************************************************************************
namespace Windows.Devices.Gpio
    {

    //  ####   #   #  #####  #####  #####  ####
    //  #   #  #   #     #      #   #      #   #
    //  ####   #   #    #      #    ###    ####
    //  #   #  #   #   #      #     #      #   #
    //  ####    ###   #####  #####  #####  #   #

	//*********************************************************************************************
	// Classe Buzzer
	//*********************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------
	/// <summary>
	/// Gère un buzzer GPIO
	/// </summary>
	//---------------------------------------------------------------------------------------------
    public static class Buzzer
        {
		//*****************************************************************************************
		[DllImport("kernel32.dll")]
		private static extern bool QueryPerformanceCounter ( out long value );
		//*****************************************************************************************

		//-----------------------------------------------------------------------------------------
		// Section des Attributs
		//-----------------------------------------------------------------------------------------
		private static GpioPin OpennedPin = null;
		//-----------------------------------------------------------------------------------------

		//*****************************************************************************************
		/// <summary>
		/// Initialise la broche de communication avec le buzzer.
		/// </summary>
		//-----------------------------------------------------------------------------------------
		public static Task<bool> Initialize ( int PinNumber )
			{
			//-------------------------------------------------------------------------------------
            var Task = new TaskCompletionSource<bool> ();

			try
				{
				var gpio = GpioController.GetDefault ();

				OpennedPin = gpio.OpenPin ( PinNumber );

				OpennedPin.SetDriveMode ( GpioPinDriveMode.Input );

				OpennedPin.Write ( GpioPinValue.Low );

				OpennedPin.SetDriveMode ( GpioPinDriveMode.Output );

				Task.SetResult ( true );
				}
			catch { Task.SetResult ( false ); }
            //-------------------------------------------------------------------------------------

            //-------------------------------------------------------------------------------------
			return Task.Task;
            //-------------------------------------------------------------------------------------
			}
    	//*****************************************************************************************

    	//*****************************************************************************************
		private static long QueryPerformanceTicks ()
			{ long T = 0; QueryPerformanceCounter ( out T ); return (long)( T * 0.1 ); }
    	//*****************************************************************************************

    	//*****************************************************************************************
		/// <summary>
		/// Génère une attente de n microsecondes.
		/// </summary>
		/// <param name="MicroSeconds">Temps à attendre.</param>
		//-----------------------------------------------------------------------------------------
		private static void Delay ( long MicroSeconds )
			{
            //-------------------------------------------------------------------------------------
			long StartTicks = QueryPerformanceTicks ();

			long EndTicks = StartTicks + MicroSeconds;

			do
				{
				StartTicks = QueryPerformanceTicks ();
				}
			while ( StartTicks < EndTicks );
            //-------------------------------------------------------------------------------------
			}
    	//*****************************************************************************************

    	//*****************************************************************************************
		/// <summary>
		/// Active le buzzer.
		/// </summary>
		/// <param name="High">Temps haut.</param>
		/// <param name="Low">Temps bas.</param>
		/// <param name="Duration">Durée du buzz.</param>
		//-----------------------------------------------------------------------------------------
		public async static void Tone ( long High, long Low, int Duration )
			{
            //-------------------------------------------------------------------------------------
			if ( OpennedPin == null ) return;
            //-------------------------------------------------------------------------------------
			
            //-------------------------------------------------------------------------------------
			await ThreadPool.RunAsync(handler =>
				{
	            //---------------------------------------------------------------------------------
				for ( int Index = 0 ; Index < Duration ; Index ++ )
					{
					OpennedPin.Write ( GpioPinValue.High ); Delay ( High );
					OpennedPin.Write ( GpioPinValue.Low  ); Delay ( Low  );
					}
	            //---------------------------------------------------------------------------------
				}, WorkItemPriority.High, WorkItemOptions.None );
            //-------------------------------------------------------------------------------------
			}
    	//*****************************************************************************************
        }
	//---------------------------------------------------------------------------------------------
	#endregion
	//*********************************************************************************************

	} // Fin du namespace "Windows.Devices.Gpio"
//*************************************************************************************************

//*************************************************************************************************
// FIN DU FICHIER
//*************************************************************************************************
